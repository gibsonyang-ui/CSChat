services:
  postgres:
    image: postgres:15-alpine
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: chatwoot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  chatwoot:
    image: chatwoot/chatwoot:v3.12.0
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      
      # 数据库配置
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: chatwoot
      
      # Redis配置
      REDIS_URL: redis://redis:6379
      
      # 应用配置
      SECRET_KEY_BASE: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2
      FRONTEND_URL: http://localhost:3000
      
      # 功能配置
      ENABLE_ACCOUNT_SIGNUP: true
      MAILER_SENDER_EMAIL: Chatwoot <noreply@localhost>
      
      # 日志配置
      RAILS_LOG_TO_STDOUT: true
      LOG_LEVEL: info
      
      # 跳过有问题的功能
      SKIP_SEED: true
      
    entrypoint: |
      sh -c '
        echo "等待数据库启动..."
        while ! pg_isready -h postgres -U postgres; do
          sleep 1
        done
        
        echo "创建数据库..."
        bundle exec rails db:create || true
        
        echo "加载基础schema..."
        DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bundle exec rails db:schema:load || true
        
        echo "启动Rails服务器..."
        bundle exec rails server -b 0.0.0.0 -p 3000
      '
    volumes:
      - storage_data:/app/storage

  sidekiq:
    image: chatwoot/chatwoot:v3.12.0
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker

      # 数据库配置
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: chatwoot

      # Redis配置
      REDIS_URL: redis://redis:6379

      # 应用配置
      SECRET_KEY_BASE: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2

      # 日志配置
      RAILS_LOG_TO_STDOUT: true
      LOG_LEVEL: info

    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    volumes:
      - storage_data:/app/storage

volumes:
  postgres_data:
  redis_data:
  storage_data:
